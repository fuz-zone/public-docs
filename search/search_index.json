{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to My Documentation \u00b6 This is a basic MkDocs website with the ReadTheDocs theme. Getting Started \u00b6 Navigate through the documentation using the menu on the left.","title":"Home"},{"location":"#welcome-to-my-documentation","text":"This is a basic MkDocs website with the ReadTheDocs theme.","title":"Welcome to My Documentation"},{"location":"#getting-started","text":"Navigate through the documentation using the menu on the left.","title":"Getting Started"},{"location":"about/","text":"About \u00b6 This documentation is built using MkDocs with the ReadTheDocs theme.","title":"About"},{"location":"about/#about","text":"This documentation is built using MkDocs with the ReadTheDocs theme.","title":"About"},{"location":"ci-cd/","text":"CI/CD Integration \u00b6 FUZ.zone integrates seamlessly with popular CI/CD platforms to automate your fuzzing workflows. GitHub Actions \u00b6 name : FUZ.zone Fuzzing on : [ push , pull_request ] jobs : fuzz : runs-on : ubuntu-latest steps : - uses : actions/checkout@v4 - name : Run Fuzzing uses : fuzzone/github-action@v1 with : api_key : ${{ secrets.FUZZONE_API_KEY }} project : my-project duration : 1h GitLab CI \u00b6 fuzz : image : fuzzone/fuzzer script : - fuzzone-cli run --project my-project --duration 1h variables : FUZZONE_API_KEY : $FUZZONE_API_KEY Jenkins \u00b6 pipeline { agent any stages { stage ( 'Fuzz' ) { steps { withCredentials ([ string ( credentialsId: 'fuzzone-api-key' , variable: 'FUZZONE_API_KEY' )]) { sh 'fuzzone-cli run --project my-project --duration 1h' } } } } } Configuration Options \u00b6 Authentication \u00b6 API key storage in CI/CD secrets Role-based access control Credential rotation policies Runtime Settings \u00b6 Fuzzing duration Resource limits Coverage goals Exit conditions Notifications \u00b6 Slack/Teams integration Email alerts Issue creation Custom webhooks Best Practices \u00b6 Security \u00b6 Store API keys securely Use minimal permissions Regular credential rotation Scan artifacts before storage Performance \u00b6 Set appropriate timeouts Configure resource limits Enable result caching Use parallel execution Monitoring \u00b6 Track coverage trends Monitor resource usage Log retention policies Performance metrics Automated Actions \u00b6 Configure automatic responses to findings: - Create tickets/issues - Block deployments - Generate reports - Trigger notifications","title":"CI/CD Integration"},{"location":"ci-cd/#cicd-integration","text":"FUZ.zone integrates seamlessly with popular CI/CD platforms to automate your fuzzing workflows.","title":"CI/CD Integration"},{"location":"ci-cd/#github-actions","text":"name : FUZ.zone Fuzzing on : [ push , pull_request ] jobs : fuzz : runs-on : ubuntu-latest steps : - uses : actions/checkout@v4 - name : Run Fuzzing uses : fuzzone/github-action@v1 with : api_key : ${{ secrets.FUZZONE_API_KEY }} project : my-project duration : 1h","title":"GitHub Actions"},{"location":"ci-cd/#gitlab-ci","text":"fuzz : image : fuzzone/fuzzer script : - fuzzone-cli run --project my-project --duration 1h variables : FUZZONE_API_KEY : $FUZZONE_API_KEY","title":"GitLab CI"},{"location":"ci-cd/#jenkins","text":"pipeline { agent any stages { stage ( 'Fuzz' ) { steps { withCredentials ([ string ( credentialsId: 'fuzzone-api-key' , variable: 'FUZZONE_API_KEY' )]) { sh 'fuzzone-cli run --project my-project --duration 1h' } } } } }","title":"Jenkins"},{"location":"ci-cd/#configuration-options","text":"","title":"Configuration Options"},{"location":"ci-cd/#authentication","text":"API key storage in CI/CD secrets Role-based access control Credential rotation policies","title":"Authentication"},{"location":"ci-cd/#runtime-settings","text":"Fuzzing duration Resource limits Coverage goals Exit conditions","title":"Runtime Settings"},{"location":"ci-cd/#notifications","text":"Slack/Teams integration Email alerts Issue creation Custom webhooks","title":"Notifications"},{"location":"ci-cd/#best-practices","text":"","title":"Best Practices"},{"location":"ci-cd/#security","text":"Store API keys securely Use minimal permissions Regular credential rotation Scan artifacts before storage","title":"Security"},{"location":"ci-cd/#performance","text":"Set appropriate timeouts Configure resource limits Enable result caching Use parallel execution","title":"Performance"},{"location":"ci-cd/#monitoring","text":"Track coverage trends Monitor resource usage Log retention policies Performance metrics","title":"Monitoring"},{"location":"ci-cd/#automated-actions","text":"Configure automatic responses to findings: - Create tickets/issues - Block deployments - Generate reports - Trigger notifications","title":"Automated Actions"},{"location":"coverage-analysis/","text":"Coverage Analysis \u00b6 Understanding and improving your fuzzing coverage. Coverage Types \u00b6 Analysis Tools \u00b6 Improving Coverage \u00b6","title":"Coverage Analysis"},{"location":"coverage-analysis/#coverage-analysis","text":"Understanding and improving your fuzzing coverage.","title":"Coverage Analysis"},{"location":"coverage-analysis/#coverage-types","text":"","title":"Coverage Types"},{"location":"coverage-analysis/#analysis-tools","text":"","title":"Analysis Tools"},{"location":"coverage-analysis/#improving-coverage","text":"","title":"Improving Coverage"},{"location":"pricing/","text":"Pricing \u00b6 Our flexible pricing options are designed to meet your fuzzing needs. Free Tier \u00b6 Basic fuzzing capabilities Community support Public projects only Professional \u00b6 Unlimited private projects Priority support Advanced fuzzing features Custom harness generation Enterprise \u00b6 Custom deployment options Dedicated support SLA guarantees Advanced security features Custom Solutions \u00b6 Contact us for custom pricing and solutions tailored to your specific needs.","title":"Pricing"},{"location":"pricing/#pricing","text":"Our flexible pricing options are designed to meet your fuzzing needs.","title":"Pricing"},{"location":"pricing/#free-tier","text":"Basic fuzzing capabilities Community support Public projects only","title":"Free Tier"},{"location":"pricing/#professional","text":"Unlimited private projects Priority support Advanced fuzzing features Custom harness generation","title":"Professional"},{"location":"pricing/#enterprise","text":"Custom deployment options Dedicated support SLA guarantees Advanced security features","title":"Enterprise"},{"location":"pricing/#custom-solutions","text":"Contact us for custom pricing and solutions tailored to your specific needs.","title":"Custom Solutions"},{"location":"projects/","text":"Projects \u00b6 A project in our fuzzing framework is defined by a set of target artifacts that you want to fuzz. Projects help organize related fuzzing targets and their associated harnesses. Project Types \u00b6 Source Code Projects \u00b6 Git Repository : Connect directly to your Git repository (GitHub, GitLab, Bitbucket) Source Upload : Upload source code as a zip/tar archive Copy/Paste : Directly paste source code for quick testing Binary Projects \u00b6 Standalone executables Shared libraries Object files Firmware images Docker Projects \u00b6 Single Container : Projects based on a Dockerfile or existing image Multi-Container : Complex environments requiring multiple interconnected containers Custom Networks : Support for custom Docker networking configurations System Image Projects \u00b6 Raw Disk Images : Full system testing with raw disk images QCOW2 Images : KVM/QEMU virtual machine images VMDK : VMware disk format support Project Organization \u00b6 Each project can contain multiple fuzzing harnesses targeting different components or entry points of your system. This allows you to: Organize related fuzzing targets Share configuration between harnesses Track coverage across multiple entry points Manage permissions and access control Generate comprehensive reports Best Practices \u00b6 Use meaningful project names and descriptions Organize related targets in the same project Document project setup and requirements Maintain separate projects for different versions or branches Regular project backup and maintenance","title":"Projects"},{"location":"projects/#projects","text":"A project in our fuzzing framework is defined by a set of target artifacts that you want to fuzz. Projects help organize related fuzzing targets and their associated harnesses.","title":"Projects"},{"location":"projects/#project-types","text":"","title":"Project Types"},{"location":"projects/#source-code-projects","text":"Git Repository : Connect directly to your Git repository (GitHub, GitLab, Bitbucket) Source Upload : Upload source code as a zip/tar archive Copy/Paste : Directly paste source code for quick testing","title":"Source Code Projects"},{"location":"projects/#binary-projects","text":"Standalone executables Shared libraries Object files Firmware images","title":"Binary Projects"},{"location":"projects/#docker-projects","text":"Single Container : Projects based on a Dockerfile or existing image Multi-Container : Complex environments requiring multiple interconnected containers Custom Networks : Support for custom Docker networking configurations","title":"Docker Projects"},{"location":"projects/#system-image-projects","text":"Raw Disk Images : Full system testing with raw disk images QCOW2 Images : KVM/QEMU virtual machine images VMDK : VMware disk format support","title":"System Image Projects"},{"location":"projects/#project-organization","text":"Each project can contain multiple fuzzing harnesses targeting different components or entry points of your system. This allows you to: Organize related fuzzing targets Share configuration between harnesses Track coverage across multiple entry points Manage permissions and access control Generate comprehensive reports","title":"Project Organization"},{"location":"projects/#best-practices","text":"Use meaningful project names and descriptions Organize related targets in the same project Document project setup and requirements Maintain separate projects for different versions or branches Regular project backup and maintenance","title":"Best Practices"},{"location":"quick-start/","text":"Quick Start Guide \u00b6 Get started quickly with our fuzzing framework. Installation \u00b6 Basic Usage \u00b6 First Fuzzing Campaign \u00b6","title":"Quick Start"},{"location":"quick-start/#quick-start-guide","text":"Get started quickly with our fuzzing framework.","title":"Quick Start Guide"},{"location":"quick-start/#installation","text":"","title":"Installation"},{"location":"quick-start/#basic-usage","text":"","title":"Basic Usage"},{"location":"quick-start/#first-fuzzing-campaign","text":"","title":"First Fuzzing Campaign"},{"location":"sca/","text":"Software Composition Analysis \u00b6 Analyze dependencies and third-party components in your project. Dependency Scanning \u00b6 Vulnerability Detection \u00b6 Risk Assessment \u00b6","title":"Software Composition Analysis"},{"location":"sca/#software-composition-analysis","text":"Analyze dependencies and third-party components in your project.","title":"Software Composition Analysis"},{"location":"sca/#dependency-scanning","text":"","title":"Dependency Scanning"},{"location":"sca/#vulnerability-detection","text":"","title":"Vulnerability Detection"},{"location":"sca/#risk-assessment","text":"","title":"Risk Assessment"},{"location":"tips-and-tricks/","text":"Tips and Tricks \u00b6 Performance Optimization \u00b6 Memory Usage \u00b6 Limit memory allocation in harnesses Use appropriate buffer sizes Clean up resources properly CPU Utilization \u00b6 Optimize harness initialization Minimize unnecessary operations Use efficient data structures Common Pitfalls \u00b6 Input Handling \u00b6 Validate input sizes Handle edge cases Check for malformed inputs Resource Management \u00b6 Close file handles Free allocated memory Release system resources Advanced Techniques \u00b6 Custom Mutators \u00b6 Implement format-aware mutations Define custom mutation strategies Balance mutation frequency Coverage Optimization \u00b6 Use function-level instrumentation Track edge coverage Implement custom coverage hooks Debugging Tips \u00b6 Crash Analysis \u00b6 Use sanitizers effectively Implement proper logging Save crash reproducers Troubleshooting \u00b6 Monitor system resources Check harness assumptions Validate environment setup","title":"Tips and Tricks"},{"location":"tips-and-tricks/#tips-and-tricks","text":"","title":"Tips and Tricks"},{"location":"tips-and-tricks/#performance-optimization","text":"","title":"Performance Optimization"},{"location":"tips-and-tricks/#memory-usage","text":"Limit memory allocation in harnesses Use appropriate buffer sizes Clean up resources properly","title":"Memory Usage"},{"location":"tips-and-tricks/#cpu-utilization","text":"Optimize harness initialization Minimize unnecessary operations Use efficient data structures","title":"CPU Utilization"},{"location":"tips-and-tricks/#common-pitfalls","text":"","title":"Common Pitfalls"},{"location":"tips-and-tricks/#input-handling","text":"Validate input sizes Handle edge cases Check for malformed inputs","title":"Input Handling"},{"location":"tips-and-tricks/#resource-management","text":"Close file handles Free allocated memory Release system resources","title":"Resource Management"},{"location":"tips-and-tricks/#advanced-techniques","text":"","title":"Advanced Techniques"},{"location":"tips-and-tricks/#custom-mutators","text":"Implement format-aware mutations Define custom mutation strategies Balance mutation frequency","title":"Custom Mutators"},{"location":"tips-and-tricks/#coverage-optimization","text":"Use function-level instrumentation Track edge coverage Implement custom coverage hooks","title":"Coverage Optimization"},{"location":"tips-and-tricks/#debugging-tips","text":"","title":"Debugging Tips"},{"location":"tips-and-tricks/#crash-analysis","text":"Use sanitizers effectively Implement proper logging Save crash reproducers","title":"Crash Analysis"},{"location":"tips-and-tricks/#troubleshooting","text":"Monitor system resources Check harness assumptions Validate environment setup","title":"Troubleshooting"},{"location":"harnesses/","text":"Fuzzing Harnesses \u00b6 A fuzzing harness is the interface between your target application and our fuzzing engine. It defines how inputs are delivered to your target and how results are collected. What is a Fuzzing Harness? \u00b6 A fuzzing harness is a specialized piece of code that: - Accepts input from the fuzzer - Delivers that input to the target - Monitors execution - Reports crashes and other interesting behaviors - Collects coverage information Supported Platforms \u00b6 Native Applications \u00b6 Linux ELF executables and shared libraries Windows PE executables and DLLs Rust applications with native compilation Managed Runtimes \u00b6 Python applications and modules Java and JVM-based applications .NET applications Special Environments \u00b6 Embedded systems Full system emulation IoT devices Mobile applications AI-Assisted Generation \u00b6 Our platform can automatically generate harnesses using AI technology for: - Common APIs and protocols - Standard file formats - Network services - Web applications Best Practices \u00b6 Keep harnesses focused and minimal Properly handle cleanup and resources Implement robust input validation Monitor memory usage Enable relevant sanitizers Document harness assumptions and limitations Platform-Specific Guidelines \u00b6 Linux \u00b6 Support for both static and dynamic linking ASAN/UBSAN integration syscall interception Windows \u00b6 PE/COFF binary instrumentation DLL injection capabilities Exception handling Python \u00b6 Module-level fuzzing Custom import hooks Coverage tracking JVM \u00b6 Bytecode instrumentation Custom classloaders JNI support Choosing the Right Harness Type \u00b6 Select your harness type based on: - Target platform and runtime - Access to source code - Performance requirements - Coverage needs - Resource constraints","title":"Harnesses"},{"location":"harnesses/#fuzzing-harnesses","text":"A fuzzing harness is the interface between your target application and our fuzzing engine. It defines how inputs are delivered to your target and how results are collected.","title":"Fuzzing Harnesses"},{"location":"harnesses/#what-is-a-fuzzing-harness","text":"A fuzzing harness is a specialized piece of code that: - Accepts input from the fuzzer - Delivers that input to the target - Monitors execution - Reports crashes and other interesting behaviors - Collects coverage information","title":"What is a Fuzzing Harness?"},{"location":"harnesses/#supported-platforms","text":"","title":"Supported Platforms"},{"location":"harnesses/#native-applications","text":"Linux ELF executables and shared libraries Windows PE executables and DLLs Rust applications with native compilation","title":"Native Applications"},{"location":"harnesses/#managed-runtimes","text":"Python applications and modules Java and JVM-based applications .NET applications","title":"Managed Runtimes"},{"location":"harnesses/#special-environments","text":"Embedded systems Full system emulation IoT devices Mobile applications","title":"Special Environments"},{"location":"harnesses/#ai-assisted-generation","text":"Our platform can automatically generate harnesses using AI technology for: - Common APIs and protocols - Standard file formats - Network services - Web applications","title":"AI-Assisted Generation"},{"location":"harnesses/#best-practices","text":"Keep harnesses focused and minimal Properly handle cleanup and resources Implement robust input validation Monitor memory usage Enable relevant sanitizers Document harness assumptions and limitations","title":"Best Practices"},{"location":"harnesses/#platform-specific-guidelines","text":"","title":"Platform-Specific Guidelines"},{"location":"harnesses/#linux","text":"Support for both static and dynamic linking ASAN/UBSAN integration syscall interception","title":"Linux"},{"location":"harnesses/#windows","text":"PE/COFF binary instrumentation DLL injection capabilities Exception handling","title":"Windows"},{"location":"harnesses/#python","text":"Module-level fuzzing Custom import hooks Coverage tracking","title":"Python"},{"location":"harnesses/#jvm","text":"Bytecode instrumentation Custom classloaders JNI support","title":"JVM"},{"location":"harnesses/#choosing-the-right-harness-type","text":"Select your harness type based on: - Target platform and runtime - Access to source code - Performance requirements - Coverage needs - Resource constraints","title":"Choosing the Right Harness Type"},{"location":"harnesses/ai-generation/","text":"AI Harness Generation \u00b6 Learn how to use AI to automatically generate fuzzing harnesses. AI-Assisted Harness Creation \u00b6 Model Training \u00b6 Best Practices \u00b6","title":"AI Harness Generation"},{"location":"harnesses/ai-generation/#ai-harness-generation","text":"Learn how to use AI to automatically generate fuzzing harnesses.","title":"AI Harness Generation"},{"location":"harnesses/ai-generation/#ai-assisted-harness-creation","text":"","title":"AI-Assisted Harness Creation"},{"location":"harnesses/ai-generation/#model-training","text":"","title":"Model Training"},{"location":"harnesses/ai-generation/#best-practices","text":"","title":"Best Practices"},{"location":"harnesses/embedded/","text":"Embedded/Full System Harnesses \u00b6 Guide for creating fuzzing harnesses for embedded systems and full system emulation. System Emulation \u00b6 Hardware Integration \u00b6 Examples \u00b6","title":"Embedded/Full System Harnesses"},{"location":"harnesses/embedded/#embeddedfull-system-harnesses","text":"Guide for creating fuzzing harnesses for embedded systems and full system emulation.","title":"Embedded/Full System Harnesses"},{"location":"harnesses/embedded/#system-emulation","text":"","title":"System Emulation"},{"location":"harnesses/embedded/#hardware-integration","text":"","title":"Hardware Integration"},{"location":"harnesses/embedded/#examples","text":"","title":"Examples"},{"location":"harnesses/jvm/","text":"JVM Harnesses \u00b6 Guide for creating fuzzing harnesses for Java and other JVM-based applications. Java Agent Integration \u00b6 Bytecode Instrumentation \u00b6 Examples \u00b6","title":"JVM Harnesses"},{"location":"harnesses/jvm/#jvm-harnesses","text":"Guide for creating fuzzing harnesses for Java and other JVM-based applications.","title":"JVM Harnesses"},{"location":"harnesses/jvm/#java-agent-integration","text":"","title":"Java Agent Integration"},{"location":"harnesses/jvm/#bytecode-instrumentation","text":"","title":"Bytecode Instrumentation"},{"location":"harnesses/jvm/#examples","text":"","title":"Examples"},{"location":"harnesses/linux/","text":"Linux ELF/Shared Library Harnesses \u00b6 Guide for creating fuzzing harnesses for Linux executables and shared libraries. ELF Binary Instrumentation \u00b6 Shared Library Integration \u00b6 Examples \u00b6","title":"Linux ELF/Shared Library Harnesses"},{"location":"harnesses/linux/#linux-elfshared-library-harnesses","text":"Guide for creating fuzzing harnesses for Linux executables and shared libraries.","title":"Linux ELF/Shared Library Harnesses"},{"location":"harnesses/linux/#elf-binary-instrumentation","text":"","title":"ELF Binary Instrumentation"},{"location":"harnesses/linux/#shared-library-integration","text":"","title":"Shared Library Integration"},{"location":"harnesses/linux/#examples","text":"","title":"Examples"},{"location":"harnesses/python/","text":"Python Harnesses \u00b6 Guide for creating fuzzing harnesses for Python applications. Python Module Integration \u00b6 Coverage Instrumentation \u00b6 Examples \u00b6","title":"Python Harnesses"},{"location":"harnesses/python/#python-harnesses","text":"Guide for creating fuzzing harnesses for Python applications.","title":"Python Harnesses"},{"location":"harnesses/python/#python-module-integration","text":"","title":"Python Module Integration"},{"location":"harnesses/python/#coverage-instrumentation","text":"","title":"Coverage Instrumentation"},{"location":"harnesses/python/#examples","text":"","title":"Examples"},{"location":"harnesses/rust/","text":"Rust Harnesses \u00b6 Guide for creating fuzzing harnesses for Rust applications. Cargo Fuzzing \u00b6 LibFuzzer Integration \u00b6 Examples \u00b6","title":"Rust Harnesses"},{"location":"harnesses/rust/#rust-harnesses","text":"Guide for creating fuzzing harnesses for Rust applications.","title":"Rust Harnesses"},{"location":"harnesses/rust/#cargo-fuzzing","text":"","title":"Cargo Fuzzing"},{"location":"harnesses/rust/#libfuzzer-integration","text":"","title":"LibFuzzer Integration"},{"location":"harnesses/rust/#examples","text":"","title":"Examples"},{"location":"harnesses/windows/","text":"Windows EXE/DLL Harnesses \u00b6 Guide for creating fuzzing harnesses for Windows executables and DLLs. PE Binary Instrumentation \u00b6 DLL Integration \u00b6 Examples \u00b6","title":"Windows EXE/DLL Harnesses"},{"location":"harnesses/windows/#windows-exedll-harnesses","text":"Guide for creating fuzzing harnesses for Windows executables and DLLs.","title":"Windows EXE/DLL Harnesses"},{"location":"harnesses/windows/#pe-binary-instrumentation","text":"","title":"PE Binary Instrumentation"},{"location":"harnesses/windows/#dll-integration","text":"","title":"DLL Integration"},{"location":"harnesses/windows/#examples","text":"","title":"Examples"}]}